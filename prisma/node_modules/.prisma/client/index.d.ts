
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Role
 * 
 */
export type Role = {
  idRole: string
  role: string
}

/**
 * Model User
 * 
 */
export type User = {
  id: string
  firstName: string
  lastName: string
  email: string
  password: string
  createdAt: Date
  updatedAt: Date
  hash: string
  hashedRt: string | null
  roleIdFk: string | null
}

/**
 * Model Cartes
 * 
 */
export type Cartes = {
  idCarte: string
  titre: string
  description: string
  status: string
  colonneIdFk: string | null
}

/**
 * Model Colonne
 * 
 */
export type Colonne = {
  idColonne: string
  userIdFk: string | null
  titre: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Roles
 * const roles = await prisma.role.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Roles
   * const roles = await prisma.role.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.cartes`: Exposes CRUD operations for the **Cartes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cartes
    * const cartes = await prisma.cartes.findMany()
    * ```
    */
  get cartes(): Prisma.CartesDelegate<GlobalReject>;

  /**
   * `prisma.colonne`: Exposes CRUD operations for the **Colonne** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Colonnes
    * const colonnes = await prisma.colonne.findMany()
    * ```
    */
  get colonne(): Prisma.ColonneDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.7.0
   * Query Engine version: 8746e055198f517658c08a0c426c7eec87f5a85f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Role: 'Role',
    User: 'User',
    Cartes: 'Cartes',
    Colonne: 'Colonne'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RoleCountOutputType
   */


  export type RoleCountOutputType = {
    users: number
  }

  export type RoleCountOutputTypeSelect = {
    users?: boolean
  }

  export type RoleCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RoleCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RoleCountOutputType
    : S extends undefined
    ? never
    : S extends RoleCountOutputTypeArgs
    ?'include' extends U
    ? RoleCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof RoleCountOutputType ?RoleCountOutputType [P]
  : 
     never
  } 
    : RoleCountOutputType
  : RoleCountOutputType




  // Custom InputTypes

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     * 
    **/
    select?: RoleCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Colonne: number
  }

  export type UserCountOutputTypeSelect = {
    Colonne?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserCountOutputType ?UserCountOutputType [P]
  : 
     never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ColonneCountOutputType
   */


  export type ColonneCountOutputType = {
    cartes: number
  }

  export type ColonneCountOutputTypeSelect = {
    cartes?: boolean
  }

  export type ColonneCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ColonneCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ColonneCountOutputType
    : S extends undefined
    ? never
    : S extends ColonneCountOutputTypeArgs
    ?'include' extends U
    ? ColonneCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ColonneCountOutputType ?ColonneCountOutputType [P]
  : 
     never
  } 
    : ColonneCountOutputType
  : ColonneCountOutputType




  // Custom InputTypes

  /**
   * ColonneCountOutputType without action
   */
  export type ColonneCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ColonneCountOutputType
     * 
    **/
    select?: ColonneCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Role
   */


  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    idRole: string | null
    role: string | null
  }

  export type RoleMaxAggregateOutputType = {
    idRole: string | null
    role: string | null
  }

  export type RoleCountAggregateOutputType = {
    idRole: number
    role: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    idRole?: true
    role?: true
  }

  export type RoleMaxAggregateInputType = {
    idRole?: true
    role?: true
  }

  export type RoleCountAggregateInputType = {
    idRole?: true
    role?: true
    _all?: true
  }

  export type RoleAggregateArgs = {
    /**
     * Filter which Role to aggregate.
     * 
    **/
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs = {
    where?: RoleWhereInput
    orderBy?: Enumerable<RoleOrderByWithAggregationInput>
    by: Array<RoleScalarFieldEnum>
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }


  export type RoleGroupByOutputType = {
    idRole: string
    role: string
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Promise<
    Array<
      PickArray<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect = {
    idRole?: boolean
    role?: boolean
    users?: boolean | UserFindManyArgs
    _count?: boolean | RoleCountOutputTypeArgs
  }

  export type RoleInclude = {
    users?: boolean | UserFindManyArgs
    _count?: boolean | RoleCountOutputTypeArgs
  }

  export type RoleGetPayload<
    S extends boolean | null | undefined | RoleArgs,
    U = keyof S
      > = S extends true
        ? Role
    : S extends undefined
    ? never
    : S extends RoleArgs | RoleFindManyArgs
    ?'include' extends U
    ? Role  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? Array < UserGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? RoleCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Role ?Role [P]
  : 
          P extends 'users'
        ? Array < UserGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? RoleCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Role
  : Role


  type RoleCountArgs = Merge<
    Omit<RoleFindManyArgs, 'select' | 'include'> & {
      select?: RoleCountAggregateInputType | true
    }
  >

  export interface RoleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RoleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Role'> extends True ? CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>> : CheckSelect<T, Prisma__RoleClient<Role | null >, Prisma__RoleClient<RoleGetPayload<T> | null >>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RoleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Role'> extends True ? CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>> : CheckSelect<T, Prisma__RoleClient<Role | null >, Prisma__RoleClient<RoleGetPayload<T> | null >>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `idRole`
     * const roleWithIdRoleOnly = await prisma.role.findMany({ select: { idRole: true } })
     * 
    **/
    findMany<T extends RoleFindManyArgs>(
      args?: SelectSubset<T, RoleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Role>>, PrismaPromise<Array<RoleGetPayload<T>>>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends RoleCreateArgs>(
      args: SelectSubset<T, RoleCreateArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Create many Roles.
     *     @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoleCreateManyArgs>(
      args?: SelectSubset<T, RoleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends RoleDeleteArgs>(
      args: SelectSubset<T, RoleDeleteArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoleUpdateArgs>(
      args: SelectSubset<T, RoleUpdateArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoleDeleteManyArgs>(
      args?: SelectSubset<T, RoleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoleUpdateManyArgs>(
      args: SelectSubset<T, RoleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends RoleUpsertArgs>(
      args: SelectSubset<T, RoleUpsertArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RoleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * Throw an Error if a Role can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Role to fetch.
     * 
    **/
    where: RoleWhereUniqueInput
  }


  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * Throw an Error if a Role can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Role to fetch.
     * 
    **/
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     * 
    **/
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     * 
    **/
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * Role findMany
   */
  export type RoleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * Filter, which Roles to fetch.
     * 
    **/
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     * 
    **/
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * Role create
   */
  export type RoleCreateArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * The data needed to create a Role.
     * 
    **/
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }


  /**
   * Role createMany
   */
  export type RoleCreateManyArgs = {
    data: Enumerable<RoleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Role update
   */
  export type RoleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * The data needed to update a Role.
     * 
    **/
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     * 
    **/
    where: RoleWhereUniqueInput
  }


  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs = {
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    where?: RoleWhereInput
  }


  /**
   * Role upsert
   */
  export type RoleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * The filter to search for the Role to update in case it exists.
     * 
    **/
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     * 
    **/
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }


  /**
   * Role delete
   */
  export type RoleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * Filter which Role to delete.
     * 
    **/
    where: RoleWhereUniqueInput
  }


  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs = {
    where?: RoleWhereInput
  }


  /**
   * Role without action
   */
  export type RoleArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    hash: string | null
    hashedRt: string | null
    roleIdFk: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    hash: string | null
    hashedRt: string | null
    roleIdFk: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    hash: number
    hashedRt: number
    roleIdFk: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    hash?: true
    hashedRt?: true
    roleIdFk?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    hash?: true
    hashedRt?: true
    roleIdFk?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    hash?: true
    hashedRt?: true
    roleIdFk?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    hash: string
    hashedRt: string | null
    roleIdFk: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hash?: boolean
    hashedRt?: boolean
    roles?: boolean | RoleArgs
    roleIdFk?: boolean
    Colonne?: boolean | ColonneFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    roles?: boolean | RoleArgs
    Colonne?: boolean | ColonneFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'roles'
        ? RoleGetPayload<S['include'][P]> | null :
        P extends 'Colonne'
        ? Array < ColonneGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'roles'
        ? RoleGetPayload<S['select'][P]> | null :
        P extends 'Colonne'
        ? Array < ColonneGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    roles<T extends RoleArgs = {}>(args?: Subset<T, RoleArgs>): CheckSelect<T, Prisma__RoleClient<Role | null >, Prisma__RoleClient<RoleGetPayload<T> | null >>;

    Colonne<T extends ColonneFindManyArgs = {}>(args?: Subset<T, ColonneFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Colonne>>, PrismaPromise<Array<ColonneGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Cartes
   */


  export type AggregateCartes = {
    _count: CartesCountAggregateOutputType | null
    _min: CartesMinAggregateOutputType | null
    _max: CartesMaxAggregateOutputType | null
  }

  export type CartesMinAggregateOutputType = {
    idCarte: string | null
    titre: string | null
    description: string | null
    status: string | null
    colonneIdFk: string | null
  }

  export type CartesMaxAggregateOutputType = {
    idCarte: string | null
    titre: string | null
    description: string | null
    status: string | null
    colonneIdFk: string | null
  }

  export type CartesCountAggregateOutputType = {
    idCarte: number
    titre: number
    description: number
    status: number
    colonneIdFk: number
    _all: number
  }


  export type CartesMinAggregateInputType = {
    idCarte?: true
    titre?: true
    description?: true
    status?: true
    colonneIdFk?: true
  }

  export type CartesMaxAggregateInputType = {
    idCarte?: true
    titre?: true
    description?: true
    status?: true
    colonneIdFk?: true
  }

  export type CartesCountAggregateInputType = {
    idCarte?: true
    titre?: true
    description?: true
    status?: true
    colonneIdFk?: true
    _all?: true
  }

  export type CartesAggregateArgs = {
    /**
     * Filter which Cartes to aggregate.
     * 
    **/
    where?: CartesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartes to fetch.
     * 
    **/
    orderBy?: Enumerable<CartesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CartesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cartes
    **/
    _count?: true | CartesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartesMaxAggregateInputType
  }

  export type GetCartesAggregateType<T extends CartesAggregateArgs> = {
        [P in keyof T & keyof AggregateCartes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartes[P]>
      : GetScalarType<T[P], AggregateCartes[P]>
  }




  export type CartesGroupByArgs = {
    where?: CartesWhereInput
    orderBy?: Enumerable<CartesOrderByWithAggregationInput>
    by: Array<CartesScalarFieldEnum>
    having?: CartesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartesCountAggregateInputType | true
    _min?: CartesMinAggregateInputType
    _max?: CartesMaxAggregateInputType
  }


  export type CartesGroupByOutputType = {
    idCarte: string
    titre: string
    description: string
    status: string
    colonneIdFk: string | null
    _count: CartesCountAggregateOutputType | null
    _min: CartesMinAggregateOutputType | null
    _max: CartesMaxAggregateOutputType | null
  }

  type GetCartesGroupByPayload<T extends CartesGroupByArgs> = Promise<
    Array<
      PickArray<CartesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartesGroupByOutputType[P]>
            : GetScalarType<T[P], CartesGroupByOutputType[P]>
        }
      >
    >


  export type CartesSelect = {
    idCarte?: boolean
    titre?: boolean
    description?: boolean
    status?: boolean
    colonnes?: boolean | ColonneArgs
    colonneIdFk?: boolean
  }

  export type CartesInclude = {
    colonnes?: boolean | ColonneArgs
  }

  export type CartesGetPayload<
    S extends boolean | null | undefined | CartesArgs,
    U = keyof S
      > = S extends true
        ? Cartes
    : S extends undefined
    ? never
    : S extends CartesArgs | CartesFindManyArgs
    ?'include' extends U
    ? Cartes  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'colonnes'
        ? ColonneGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Cartes ?Cartes [P]
  : 
          P extends 'colonnes'
        ? ColonneGetPayload<S['select'][P]> | null : never
  } 
    : Cartes
  : Cartes


  type CartesCountArgs = Merge<
    Omit<CartesFindManyArgs, 'select' | 'include'> & {
      select?: CartesCountAggregateInputType | true
    }
  >

  export interface CartesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Cartes that matches the filter.
     * @param {CartesFindUniqueArgs} args - Arguments to find a Cartes
     * @example
     * // Get one Cartes
     * const cartes = await prisma.cartes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CartesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CartesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Cartes'> extends True ? CheckSelect<T, Prisma__CartesClient<Cartes>, Prisma__CartesClient<CartesGetPayload<T>>> : CheckSelect<T, Prisma__CartesClient<Cartes | null >, Prisma__CartesClient<CartesGetPayload<T> | null >>

    /**
     * Find the first Cartes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartesFindFirstArgs} args - Arguments to find a Cartes
     * @example
     * // Get one Cartes
     * const cartes = await prisma.cartes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CartesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CartesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Cartes'> extends True ? CheckSelect<T, Prisma__CartesClient<Cartes>, Prisma__CartesClient<CartesGetPayload<T>>> : CheckSelect<T, Prisma__CartesClient<Cartes | null >, Prisma__CartesClient<CartesGetPayload<T> | null >>

    /**
     * Find zero or more Cartes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cartes
     * const cartes = await prisma.cartes.findMany()
     * 
     * // Get first 10 Cartes
     * const cartes = await prisma.cartes.findMany({ take: 10 })
     * 
     * // Only select the `idCarte`
     * const cartesWithIdCarteOnly = await prisma.cartes.findMany({ select: { idCarte: true } })
     * 
    **/
    findMany<T extends CartesFindManyArgs>(
      args?: SelectSubset<T, CartesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Cartes>>, PrismaPromise<Array<CartesGetPayload<T>>>>

    /**
     * Create a Cartes.
     * @param {CartesCreateArgs} args - Arguments to create a Cartes.
     * @example
     * // Create one Cartes
     * const Cartes = await prisma.cartes.create({
     *   data: {
     *     // ... data to create a Cartes
     *   }
     * })
     * 
    **/
    create<T extends CartesCreateArgs>(
      args: SelectSubset<T, CartesCreateArgs>
    ): CheckSelect<T, Prisma__CartesClient<Cartes>, Prisma__CartesClient<CartesGetPayload<T>>>

    /**
     * Create many Cartes.
     *     @param {CartesCreateManyArgs} args - Arguments to create many Cartes.
     *     @example
     *     // Create many Cartes
     *     const cartes = await prisma.cartes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CartesCreateManyArgs>(
      args?: SelectSubset<T, CartesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cartes.
     * @param {CartesDeleteArgs} args - Arguments to delete one Cartes.
     * @example
     * // Delete one Cartes
     * const Cartes = await prisma.cartes.delete({
     *   where: {
     *     // ... filter to delete one Cartes
     *   }
     * })
     * 
    **/
    delete<T extends CartesDeleteArgs>(
      args: SelectSubset<T, CartesDeleteArgs>
    ): CheckSelect<T, Prisma__CartesClient<Cartes>, Prisma__CartesClient<CartesGetPayload<T>>>

    /**
     * Update one Cartes.
     * @param {CartesUpdateArgs} args - Arguments to update one Cartes.
     * @example
     * // Update one Cartes
     * const cartes = await prisma.cartes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CartesUpdateArgs>(
      args: SelectSubset<T, CartesUpdateArgs>
    ): CheckSelect<T, Prisma__CartesClient<Cartes>, Prisma__CartesClient<CartesGetPayload<T>>>

    /**
     * Delete zero or more Cartes.
     * @param {CartesDeleteManyArgs} args - Arguments to filter Cartes to delete.
     * @example
     * // Delete a few Cartes
     * const { count } = await prisma.cartes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CartesDeleteManyArgs>(
      args?: SelectSubset<T, CartesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cartes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cartes
     * const cartes = await prisma.cartes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CartesUpdateManyArgs>(
      args: SelectSubset<T, CartesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cartes.
     * @param {CartesUpsertArgs} args - Arguments to update or create a Cartes.
     * @example
     * // Update or create a Cartes
     * const cartes = await prisma.cartes.upsert({
     *   create: {
     *     // ... data to create a Cartes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cartes we want to update
     *   }
     * })
    **/
    upsert<T extends CartesUpsertArgs>(
      args: SelectSubset<T, CartesUpsertArgs>
    ): CheckSelect<T, Prisma__CartesClient<Cartes>, Prisma__CartesClient<CartesGetPayload<T>>>

    /**
     * Count the number of Cartes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartesCountArgs} args - Arguments to filter Cartes to count.
     * @example
     * // Count the number of Cartes
     * const count = await prisma.cartes.count({
     *   where: {
     *     // ... the filter for the Cartes we want to count
     *   }
     * })
    **/
    count<T extends CartesCountArgs>(
      args?: Subset<T, CartesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cartes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartesAggregateArgs>(args: Subset<T, CartesAggregateArgs>): PrismaPromise<GetCartesAggregateType<T>>

    /**
     * Group by Cartes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartesGroupByArgs['orderBy'] }
        : { orderBy?: CartesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cartes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CartesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    colonnes<T extends ColonneArgs = {}>(args?: Subset<T, ColonneArgs>): CheckSelect<T, Prisma__ColonneClient<Colonne | null >, Prisma__ColonneClient<ColonneGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Cartes findUnique
   */
  export type CartesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Cartes
     * 
    **/
    select?: CartesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CartesInclude | null
    /**
     * Throw an Error if a Cartes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Cartes to fetch.
     * 
    **/
    where: CartesWhereUniqueInput
  }


  /**
   * Cartes findFirst
   */
  export type CartesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Cartes
     * 
    **/
    select?: CartesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CartesInclude | null
    /**
     * Throw an Error if a Cartes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Cartes to fetch.
     * 
    **/
    where?: CartesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartes to fetch.
     * 
    **/
    orderBy?: Enumerable<CartesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cartes.
     * 
    **/
    cursor?: CartesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cartes.
     * 
    **/
    distinct?: Enumerable<CartesScalarFieldEnum>
  }


  /**
   * Cartes findMany
   */
  export type CartesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Cartes
     * 
    **/
    select?: CartesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CartesInclude | null
    /**
     * Filter, which Cartes to fetch.
     * 
    **/
    where?: CartesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartes to fetch.
     * 
    **/
    orderBy?: Enumerable<CartesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cartes.
     * 
    **/
    cursor?: CartesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CartesScalarFieldEnum>
  }


  /**
   * Cartes create
   */
  export type CartesCreateArgs = {
    /**
     * Select specific fields to fetch from the Cartes
     * 
    **/
    select?: CartesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CartesInclude | null
    /**
     * The data needed to create a Cartes.
     * 
    **/
    data: XOR<CartesCreateInput, CartesUncheckedCreateInput>
  }


  /**
   * Cartes createMany
   */
  export type CartesCreateManyArgs = {
    data: Enumerable<CartesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Cartes update
   */
  export type CartesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Cartes
     * 
    **/
    select?: CartesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CartesInclude | null
    /**
     * The data needed to update a Cartes.
     * 
    **/
    data: XOR<CartesUpdateInput, CartesUncheckedUpdateInput>
    /**
     * Choose, which Cartes to update.
     * 
    **/
    where: CartesWhereUniqueInput
  }


  /**
   * Cartes updateMany
   */
  export type CartesUpdateManyArgs = {
    data: XOR<CartesUpdateManyMutationInput, CartesUncheckedUpdateManyInput>
    where?: CartesWhereInput
  }


  /**
   * Cartes upsert
   */
  export type CartesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Cartes
     * 
    **/
    select?: CartesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CartesInclude | null
    /**
     * The filter to search for the Cartes to update in case it exists.
     * 
    **/
    where: CartesWhereUniqueInput
    /**
     * In case the Cartes found by the `where` argument doesn't exist, create a new Cartes with this data.
     * 
    **/
    create: XOR<CartesCreateInput, CartesUncheckedCreateInput>
    /**
     * In case the Cartes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CartesUpdateInput, CartesUncheckedUpdateInput>
  }


  /**
   * Cartes delete
   */
  export type CartesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Cartes
     * 
    **/
    select?: CartesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CartesInclude | null
    /**
     * Filter which Cartes to delete.
     * 
    **/
    where: CartesWhereUniqueInput
  }


  /**
   * Cartes deleteMany
   */
  export type CartesDeleteManyArgs = {
    where?: CartesWhereInput
  }


  /**
   * Cartes without action
   */
  export type CartesArgs = {
    /**
     * Select specific fields to fetch from the Cartes
     * 
    **/
    select?: CartesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CartesInclude | null
  }



  /**
   * Model Colonne
   */


  export type AggregateColonne = {
    _count: ColonneCountAggregateOutputType | null
    _min: ColonneMinAggregateOutputType | null
    _max: ColonneMaxAggregateOutputType | null
  }

  export type ColonneMinAggregateOutputType = {
    idColonne: string | null
    userIdFk: string | null
    titre: string | null
  }

  export type ColonneMaxAggregateOutputType = {
    idColonne: string | null
    userIdFk: string | null
    titre: string | null
  }

  export type ColonneCountAggregateOutputType = {
    idColonne: number
    userIdFk: number
    titre: number
    _all: number
  }


  export type ColonneMinAggregateInputType = {
    idColonne?: true
    userIdFk?: true
    titre?: true
  }

  export type ColonneMaxAggregateInputType = {
    idColonne?: true
    userIdFk?: true
    titre?: true
  }

  export type ColonneCountAggregateInputType = {
    idColonne?: true
    userIdFk?: true
    titre?: true
    _all?: true
  }

  export type ColonneAggregateArgs = {
    /**
     * Filter which Colonne to aggregate.
     * 
    **/
    where?: ColonneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colonnes to fetch.
     * 
    **/
    orderBy?: Enumerable<ColonneOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ColonneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colonnes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colonnes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Colonnes
    **/
    _count?: true | ColonneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColonneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColonneMaxAggregateInputType
  }

  export type GetColonneAggregateType<T extends ColonneAggregateArgs> = {
        [P in keyof T & keyof AggregateColonne]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColonne[P]>
      : GetScalarType<T[P], AggregateColonne[P]>
  }




  export type ColonneGroupByArgs = {
    where?: ColonneWhereInput
    orderBy?: Enumerable<ColonneOrderByWithAggregationInput>
    by: Array<ColonneScalarFieldEnum>
    having?: ColonneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColonneCountAggregateInputType | true
    _min?: ColonneMinAggregateInputType
    _max?: ColonneMaxAggregateInputType
  }


  export type ColonneGroupByOutputType = {
    idColonne: string
    userIdFk: string | null
    titre: string
    _count: ColonneCountAggregateOutputType | null
    _min: ColonneMinAggregateOutputType | null
    _max: ColonneMaxAggregateOutputType | null
  }

  type GetColonneGroupByPayload<T extends ColonneGroupByArgs> = Promise<
    Array<
      PickArray<ColonneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColonneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColonneGroupByOutputType[P]>
            : GetScalarType<T[P], ColonneGroupByOutputType[P]>
        }
      >
    >


  export type ColonneSelect = {
    idColonne?: boolean
    users?: boolean | UserArgs
    userIdFk?: boolean
    titre?: boolean
    cartes?: boolean | CartesFindManyArgs
    _count?: boolean | ColonneCountOutputTypeArgs
  }

  export type ColonneInclude = {
    users?: boolean | UserArgs
    cartes?: boolean | CartesFindManyArgs
    _count?: boolean | ColonneCountOutputTypeArgs
  }

  export type ColonneGetPayload<
    S extends boolean | null | undefined | ColonneArgs,
    U = keyof S
      > = S extends true
        ? Colonne
    : S extends undefined
    ? never
    : S extends ColonneArgs | ColonneFindManyArgs
    ?'include' extends U
    ? Colonne  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? UserGetPayload<S['include'][P]> | null :
        P extends 'cartes'
        ? Array < CartesGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? ColonneCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Colonne ?Colonne [P]
  : 
          P extends 'users'
        ? UserGetPayload<S['select'][P]> | null :
        P extends 'cartes'
        ? Array < CartesGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? ColonneCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Colonne
  : Colonne


  type ColonneCountArgs = Merge<
    Omit<ColonneFindManyArgs, 'select' | 'include'> & {
      select?: ColonneCountAggregateInputType | true
    }
  >

  export interface ColonneDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Colonne that matches the filter.
     * @param {ColonneFindUniqueArgs} args - Arguments to find a Colonne
     * @example
     * // Get one Colonne
     * const colonne = await prisma.colonne.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ColonneFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ColonneFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Colonne'> extends True ? CheckSelect<T, Prisma__ColonneClient<Colonne>, Prisma__ColonneClient<ColonneGetPayload<T>>> : CheckSelect<T, Prisma__ColonneClient<Colonne | null >, Prisma__ColonneClient<ColonneGetPayload<T> | null >>

    /**
     * Find the first Colonne that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColonneFindFirstArgs} args - Arguments to find a Colonne
     * @example
     * // Get one Colonne
     * const colonne = await prisma.colonne.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ColonneFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ColonneFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Colonne'> extends True ? CheckSelect<T, Prisma__ColonneClient<Colonne>, Prisma__ColonneClient<ColonneGetPayload<T>>> : CheckSelect<T, Prisma__ColonneClient<Colonne | null >, Prisma__ColonneClient<ColonneGetPayload<T> | null >>

    /**
     * Find zero or more Colonnes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColonneFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Colonnes
     * const colonnes = await prisma.colonne.findMany()
     * 
     * // Get first 10 Colonnes
     * const colonnes = await prisma.colonne.findMany({ take: 10 })
     * 
     * // Only select the `idColonne`
     * const colonneWithIdColonneOnly = await prisma.colonne.findMany({ select: { idColonne: true } })
     * 
    **/
    findMany<T extends ColonneFindManyArgs>(
      args?: SelectSubset<T, ColonneFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Colonne>>, PrismaPromise<Array<ColonneGetPayload<T>>>>

    /**
     * Create a Colonne.
     * @param {ColonneCreateArgs} args - Arguments to create a Colonne.
     * @example
     * // Create one Colonne
     * const Colonne = await prisma.colonne.create({
     *   data: {
     *     // ... data to create a Colonne
     *   }
     * })
     * 
    **/
    create<T extends ColonneCreateArgs>(
      args: SelectSubset<T, ColonneCreateArgs>
    ): CheckSelect<T, Prisma__ColonneClient<Colonne>, Prisma__ColonneClient<ColonneGetPayload<T>>>

    /**
     * Create many Colonnes.
     *     @param {ColonneCreateManyArgs} args - Arguments to create many Colonnes.
     *     @example
     *     // Create many Colonnes
     *     const colonne = await prisma.colonne.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ColonneCreateManyArgs>(
      args?: SelectSubset<T, ColonneCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Colonne.
     * @param {ColonneDeleteArgs} args - Arguments to delete one Colonne.
     * @example
     * // Delete one Colonne
     * const Colonne = await prisma.colonne.delete({
     *   where: {
     *     // ... filter to delete one Colonne
     *   }
     * })
     * 
    **/
    delete<T extends ColonneDeleteArgs>(
      args: SelectSubset<T, ColonneDeleteArgs>
    ): CheckSelect<T, Prisma__ColonneClient<Colonne>, Prisma__ColonneClient<ColonneGetPayload<T>>>

    /**
     * Update one Colonne.
     * @param {ColonneUpdateArgs} args - Arguments to update one Colonne.
     * @example
     * // Update one Colonne
     * const colonne = await prisma.colonne.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ColonneUpdateArgs>(
      args: SelectSubset<T, ColonneUpdateArgs>
    ): CheckSelect<T, Prisma__ColonneClient<Colonne>, Prisma__ColonneClient<ColonneGetPayload<T>>>

    /**
     * Delete zero or more Colonnes.
     * @param {ColonneDeleteManyArgs} args - Arguments to filter Colonnes to delete.
     * @example
     * // Delete a few Colonnes
     * const { count } = await prisma.colonne.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ColonneDeleteManyArgs>(
      args?: SelectSubset<T, ColonneDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Colonnes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColonneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Colonnes
     * const colonne = await prisma.colonne.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ColonneUpdateManyArgs>(
      args: SelectSubset<T, ColonneUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Colonne.
     * @param {ColonneUpsertArgs} args - Arguments to update or create a Colonne.
     * @example
     * // Update or create a Colonne
     * const colonne = await prisma.colonne.upsert({
     *   create: {
     *     // ... data to create a Colonne
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Colonne we want to update
     *   }
     * })
    **/
    upsert<T extends ColonneUpsertArgs>(
      args: SelectSubset<T, ColonneUpsertArgs>
    ): CheckSelect<T, Prisma__ColonneClient<Colonne>, Prisma__ColonneClient<ColonneGetPayload<T>>>

    /**
     * Count the number of Colonnes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColonneCountArgs} args - Arguments to filter Colonnes to count.
     * @example
     * // Count the number of Colonnes
     * const count = await prisma.colonne.count({
     *   where: {
     *     // ... the filter for the Colonnes we want to count
     *   }
     * })
    **/
    count<T extends ColonneCountArgs>(
      args?: Subset<T, ColonneCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColonneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Colonne.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColonneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColonneAggregateArgs>(args: Subset<T, ColonneAggregateArgs>): PrismaPromise<GetColonneAggregateType<T>>

    /**
     * Group by Colonne.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColonneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ColonneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ColonneGroupByArgs['orderBy'] }
        : { orderBy?: ColonneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ColonneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColonneGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Colonne.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ColonneClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    cartes<T extends CartesFindManyArgs = {}>(args?: Subset<T, CartesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Cartes>>, PrismaPromise<Array<CartesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Colonne findUnique
   */
  export type ColonneFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Colonne
     * 
    **/
    select?: ColonneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColonneInclude | null
    /**
     * Throw an Error if a Colonne can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Colonne to fetch.
     * 
    **/
    where: ColonneWhereUniqueInput
  }


  /**
   * Colonne findFirst
   */
  export type ColonneFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Colonne
     * 
    **/
    select?: ColonneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColonneInclude | null
    /**
     * Throw an Error if a Colonne can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Colonne to fetch.
     * 
    **/
    where?: ColonneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colonnes to fetch.
     * 
    **/
    orderBy?: Enumerable<ColonneOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colonnes.
     * 
    **/
    cursor?: ColonneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colonnes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colonnes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colonnes.
     * 
    **/
    distinct?: Enumerable<ColonneScalarFieldEnum>
  }


  /**
   * Colonne findMany
   */
  export type ColonneFindManyArgs = {
    /**
     * Select specific fields to fetch from the Colonne
     * 
    **/
    select?: ColonneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColonneInclude | null
    /**
     * Filter, which Colonnes to fetch.
     * 
    **/
    where?: ColonneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colonnes to fetch.
     * 
    **/
    orderBy?: Enumerable<ColonneOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Colonnes.
     * 
    **/
    cursor?: ColonneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colonnes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colonnes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ColonneScalarFieldEnum>
  }


  /**
   * Colonne create
   */
  export type ColonneCreateArgs = {
    /**
     * Select specific fields to fetch from the Colonne
     * 
    **/
    select?: ColonneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColonneInclude | null
    /**
     * The data needed to create a Colonne.
     * 
    **/
    data: XOR<ColonneCreateInput, ColonneUncheckedCreateInput>
  }


  /**
   * Colonne createMany
   */
  export type ColonneCreateManyArgs = {
    data: Enumerable<ColonneCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Colonne update
   */
  export type ColonneUpdateArgs = {
    /**
     * Select specific fields to fetch from the Colonne
     * 
    **/
    select?: ColonneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColonneInclude | null
    /**
     * The data needed to update a Colonne.
     * 
    **/
    data: XOR<ColonneUpdateInput, ColonneUncheckedUpdateInput>
    /**
     * Choose, which Colonne to update.
     * 
    **/
    where: ColonneWhereUniqueInput
  }


  /**
   * Colonne updateMany
   */
  export type ColonneUpdateManyArgs = {
    data: XOR<ColonneUpdateManyMutationInput, ColonneUncheckedUpdateManyInput>
    where?: ColonneWhereInput
  }


  /**
   * Colonne upsert
   */
  export type ColonneUpsertArgs = {
    /**
     * Select specific fields to fetch from the Colonne
     * 
    **/
    select?: ColonneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColonneInclude | null
    /**
     * The filter to search for the Colonne to update in case it exists.
     * 
    **/
    where: ColonneWhereUniqueInput
    /**
     * In case the Colonne found by the `where` argument doesn't exist, create a new Colonne with this data.
     * 
    **/
    create: XOR<ColonneCreateInput, ColonneUncheckedCreateInput>
    /**
     * In case the Colonne was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ColonneUpdateInput, ColonneUncheckedUpdateInput>
  }


  /**
   * Colonne delete
   */
  export type ColonneDeleteArgs = {
    /**
     * Select specific fields to fetch from the Colonne
     * 
    **/
    select?: ColonneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColonneInclude | null
    /**
     * Filter which Colonne to delete.
     * 
    **/
    where: ColonneWhereUniqueInput
  }


  /**
   * Colonne deleteMany
   */
  export type ColonneDeleteManyArgs = {
    where?: ColonneWhereInput
  }


  /**
   * Colonne without action
   */
  export type ColonneArgs = {
    /**
     * Select specific fields to fetch from the Colonne
     * 
    **/
    select?: ColonneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColonneInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const RoleScalarFieldEnum: {
    idRole: 'idRole',
    role: 'role'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    hash: 'hash',
    hashedRt: 'hashedRt',
    roleIdFk: 'roleIdFk'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CartesScalarFieldEnum: {
    idCarte: 'idCarte',
    titre: 'titre',
    description: 'description',
    status: 'status',
    colonneIdFk: 'colonneIdFk'
  };

  export type CartesScalarFieldEnum = (typeof CartesScalarFieldEnum)[keyof typeof CartesScalarFieldEnum]


  export const ColonneScalarFieldEnum: {
    idColonne: 'idColonne',
    userIdFk: 'userIdFk',
    titre: 'titre'
  };

  export type ColonneScalarFieldEnum = (typeof ColonneScalarFieldEnum)[keyof typeof ColonneScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type RoleWhereInput = {
    AND?: Enumerable<RoleWhereInput>
    OR?: Enumerable<RoleWhereInput>
    NOT?: Enumerable<RoleWhereInput>
    idRole?: StringFilter | string
    role?: StringFilter | string
    users?: UserListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    idRole?: SortOrder
    role?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = {
    idRole?: string
  }

  export type RoleOrderByWithAggregationInput = {
    idRole?: SortOrder
    role?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RoleScalarWhereWithAggregatesInput>
    OR?: Enumerable<RoleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RoleScalarWhereWithAggregatesInput>
    idRole?: StringWithAggregatesFilter | string
    role?: StringWithAggregatesFilter | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    hash?: StringFilter | string
    hashedRt?: StringNullableFilter | string | null
    roles?: XOR<RoleRelationFilter, RoleWhereInput> | null
    roleIdFk?: StringNullableFilter | string | null
    Colonne?: ColonneListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hash?: SortOrder
    hashedRt?: SortOrder
    roles?: RoleOrderByWithRelationInput
    roleIdFk?: SortOrder
    Colonne?: ColonneOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hash?: SortOrder
    hashedRt?: SortOrder
    roleIdFk?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    hash?: StringWithAggregatesFilter | string
    hashedRt?: StringNullableWithAggregatesFilter | string | null
    roleIdFk?: StringNullableWithAggregatesFilter | string | null
  }

  export type CartesWhereInput = {
    AND?: Enumerable<CartesWhereInput>
    OR?: Enumerable<CartesWhereInput>
    NOT?: Enumerable<CartesWhereInput>
    idCarte?: StringFilter | string
    titre?: StringFilter | string
    description?: StringFilter | string
    status?: StringFilter | string
    colonnes?: XOR<ColonneRelationFilter, ColonneWhereInput> | null
    colonneIdFk?: StringNullableFilter | string | null
  }

  export type CartesOrderByWithRelationInput = {
    idCarte?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    status?: SortOrder
    colonnes?: ColonneOrderByWithRelationInput
    colonneIdFk?: SortOrder
  }

  export type CartesWhereUniqueInput = {
    idCarte?: string
  }

  export type CartesOrderByWithAggregationInput = {
    idCarte?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    status?: SortOrder
    colonneIdFk?: SortOrder
    _count?: CartesCountOrderByAggregateInput
    _max?: CartesMaxOrderByAggregateInput
    _min?: CartesMinOrderByAggregateInput
  }

  export type CartesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CartesScalarWhereWithAggregatesInput>
    OR?: Enumerable<CartesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CartesScalarWhereWithAggregatesInput>
    idCarte?: StringWithAggregatesFilter | string
    titre?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    colonneIdFk?: StringNullableWithAggregatesFilter | string | null
  }

  export type ColonneWhereInput = {
    AND?: Enumerable<ColonneWhereInput>
    OR?: Enumerable<ColonneWhereInput>
    NOT?: Enumerable<ColonneWhereInput>
    idColonne?: StringFilter | string
    users?: XOR<UserRelationFilter, UserWhereInput> | null
    userIdFk?: StringNullableFilter | string | null
    titre?: StringFilter | string
    cartes?: CartesListRelationFilter
  }

  export type ColonneOrderByWithRelationInput = {
    idColonne?: SortOrder
    users?: UserOrderByWithRelationInput
    userIdFk?: SortOrder
    titre?: SortOrder
    cartes?: CartesOrderByRelationAggregateInput
  }

  export type ColonneWhereUniqueInput = {
    idColonne?: string
  }

  export type ColonneOrderByWithAggregationInput = {
    idColonne?: SortOrder
    userIdFk?: SortOrder
    titre?: SortOrder
    _count?: ColonneCountOrderByAggregateInput
    _max?: ColonneMaxOrderByAggregateInput
    _min?: ColonneMinOrderByAggregateInput
  }

  export type ColonneScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ColonneScalarWhereWithAggregatesInput>
    OR?: Enumerable<ColonneScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ColonneScalarWhereWithAggregatesInput>
    idColonne?: StringWithAggregatesFilter | string
    userIdFk?: StringNullableWithAggregatesFilter | string | null
    titre?: StringWithAggregatesFilter | string
  }

  export type RoleCreateInput = {
    idRole?: string
    role: string
    users?: UserCreateNestedManyWithoutRolesInput
  }

  export type RoleUncheckedCreateInput = {
    idRole?: string
    role: string
    users?: UserUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RoleUpdateInput = {
    idRole?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutRolesInput
  }

  export type RoleUncheckedUpdateInput = {
    idRole?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutRolesInput
  }

  export type RoleCreateManyInput = {
    idRole?: string
    role: string
  }

  export type RoleUpdateManyMutationInput = {
    idRole?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    idRole?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    hashedRt?: string | null
    roles?: RoleCreateNestedOneWithoutUsersInput
    Colonne?: ColonneCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    hashedRt?: string | null
    roleIdFk?: string | null
    Colonne?: ColonneUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: RoleUpdateOneWithoutUsersInput
    Colonne?: ColonneUpdateManyWithoutUsersInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    roleIdFk?: NullableStringFieldUpdateOperationsInput | string | null
    Colonne?: ColonneUncheckedUpdateManyWithoutUsersInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    hashedRt?: string | null
    roleIdFk?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    roleIdFk?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CartesCreateInput = {
    idCarte?: string
    titre: string
    description: string
    status: string
    colonnes?: ColonneCreateNestedOneWithoutCartesInput
  }

  export type CartesUncheckedCreateInput = {
    idCarte?: string
    titre: string
    description: string
    status: string
    colonneIdFk?: string | null
  }

  export type CartesUpdateInput = {
    idCarte?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    colonnes?: ColonneUpdateOneWithoutCartesInput
  }

  export type CartesUncheckedUpdateInput = {
    idCarte?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    colonneIdFk?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CartesCreateManyInput = {
    idCarte?: string
    titre: string
    description: string
    status: string
    colonneIdFk?: string | null
  }

  export type CartesUpdateManyMutationInput = {
    idCarte?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CartesUncheckedUpdateManyInput = {
    idCarte?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    colonneIdFk?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ColonneCreateInput = {
    idColonne?: string
    titre: string
    users?: UserCreateNestedOneWithoutColonneInput
    cartes?: CartesCreateNestedManyWithoutColonnesInput
  }

  export type ColonneUncheckedCreateInput = {
    idColonne?: string
    userIdFk?: string | null
    titre: string
    cartes?: CartesUncheckedCreateNestedManyWithoutColonnesInput
  }

  export type ColonneUpdateInput = {
    idColonne?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateOneWithoutColonneInput
    cartes?: CartesUpdateManyWithoutColonnesInput
  }

  export type ColonneUncheckedUpdateInput = {
    idColonne?: StringFieldUpdateOperationsInput | string
    userIdFk?: NullableStringFieldUpdateOperationsInput | string | null
    titre?: StringFieldUpdateOperationsInput | string
    cartes?: CartesUncheckedUpdateManyWithoutColonnesInput
  }

  export type ColonneCreateManyInput = {
    idColonne?: string
    userIdFk?: string | null
    titre: string
  }

  export type ColonneUpdateManyMutationInput = {
    idColonne?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
  }

  export type ColonneUncheckedUpdateManyInput = {
    idColonne?: StringFieldUpdateOperationsInput | string
    userIdFk?: NullableStringFieldUpdateOperationsInput | string | null
    titre?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    idRole?: SortOrder
    role?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    idRole?: SortOrder
    role?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    idRole?: SortOrder
    role?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput | null
    isNot?: RoleWhereInput | null
  }

  export type ColonneListRelationFilter = {
    every?: ColonneWhereInput
    some?: ColonneWhereInput
    none?: ColonneWhereInput
  }

  export type ColonneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hash?: SortOrder
    hashedRt?: SortOrder
    roleIdFk?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hash?: SortOrder
    hashedRt?: SortOrder
    roleIdFk?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hash?: SortOrder
    hashedRt?: SortOrder
    roleIdFk?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type ColonneRelationFilter = {
    is?: ColonneWhereInput | null
    isNot?: ColonneWhereInput | null
  }

  export type CartesCountOrderByAggregateInput = {
    idCarte?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    status?: SortOrder
    colonneIdFk?: SortOrder
  }

  export type CartesMaxOrderByAggregateInput = {
    idCarte?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    status?: SortOrder
    colonneIdFk?: SortOrder
  }

  export type CartesMinOrderByAggregateInput = {
    idCarte?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    status?: SortOrder
    colonneIdFk?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CartesListRelationFilter = {
    every?: CartesWhereInput
    some?: CartesWhereInput
    none?: CartesWhereInput
  }

  export type CartesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ColonneCountOrderByAggregateInput = {
    idColonne?: SortOrder
    userIdFk?: SortOrder
    titre?: SortOrder
  }

  export type ColonneMaxOrderByAggregateInput = {
    idColonne?: SortOrder
    userIdFk?: SortOrder
    titre?: SortOrder
  }

  export type ColonneMinOrderByAggregateInput = {
    idColonne?: SortOrder
    userIdFk?: SortOrder
    titre?: SortOrder
  }

  export type UserCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<UserCreateWithoutRolesInput>, Enumerable<UserUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRolesInput>
    createMany?: UserCreateManyRolesInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<UserCreateWithoutRolesInput>, Enumerable<UserUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRolesInput>
    createMany?: UserCreateManyRolesInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutRolesInput = {
    create?: XOR<Enumerable<UserCreateWithoutRolesInput>, Enumerable<UserUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRolesInput>
    createMany?: UserCreateManyRolesInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutRolesInput = {
    create?: XOR<Enumerable<UserCreateWithoutRolesInput>, Enumerable<UserUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRolesInput>
    createMany?: UserCreateManyRolesInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type ColonneCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<ColonneCreateWithoutUsersInput>, Enumerable<ColonneUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ColonneCreateOrConnectWithoutUsersInput>
    createMany?: ColonneCreateManyUsersInputEnvelope
    connect?: Enumerable<ColonneWhereUniqueInput>
  }

  export type ColonneUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<ColonneCreateWithoutUsersInput>, Enumerable<ColonneUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ColonneCreateOrConnectWithoutUsersInput>
    createMany?: ColonneCreateManyUsersInputEnvelope
    connect?: Enumerable<ColonneWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type RoleUpdateOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: RoleWhereUniqueInput
    update?: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type ColonneUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<ColonneCreateWithoutUsersInput>, Enumerable<ColonneUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ColonneCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<ColonneUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: ColonneCreateManyUsersInputEnvelope
    set?: Enumerable<ColonneWhereUniqueInput>
    disconnect?: Enumerable<ColonneWhereUniqueInput>
    delete?: Enumerable<ColonneWhereUniqueInput>
    connect?: Enumerable<ColonneWhereUniqueInput>
    update?: Enumerable<ColonneUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<ColonneUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<ColonneScalarWhereInput>
  }

  export type ColonneUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<ColonneCreateWithoutUsersInput>, Enumerable<ColonneUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ColonneCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<ColonneUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: ColonneCreateManyUsersInputEnvelope
    set?: Enumerable<ColonneWhereUniqueInput>
    disconnect?: Enumerable<ColonneWhereUniqueInput>
    delete?: Enumerable<ColonneWhereUniqueInput>
    connect?: Enumerable<ColonneWhereUniqueInput>
    update?: Enumerable<ColonneUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<ColonneUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<ColonneScalarWhereInput>
  }

  export type ColonneCreateNestedOneWithoutCartesInput = {
    create?: XOR<ColonneCreateWithoutCartesInput, ColonneUncheckedCreateWithoutCartesInput>
    connectOrCreate?: ColonneCreateOrConnectWithoutCartesInput
    connect?: ColonneWhereUniqueInput
  }

  export type ColonneUpdateOneWithoutCartesInput = {
    create?: XOR<ColonneCreateWithoutCartesInput, ColonneUncheckedCreateWithoutCartesInput>
    connectOrCreate?: ColonneCreateOrConnectWithoutCartesInput
    upsert?: ColonneUpsertWithoutCartesInput
    disconnect?: boolean
    delete?: boolean
    connect?: ColonneWhereUniqueInput
    update?: XOR<ColonneUpdateWithoutCartesInput, ColonneUncheckedUpdateWithoutCartesInput>
  }

  export type UserCreateNestedOneWithoutColonneInput = {
    create?: XOR<UserCreateWithoutColonneInput, UserUncheckedCreateWithoutColonneInput>
    connectOrCreate?: UserCreateOrConnectWithoutColonneInput
    connect?: UserWhereUniqueInput
  }

  export type CartesCreateNestedManyWithoutColonnesInput = {
    create?: XOR<Enumerable<CartesCreateWithoutColonnesInput>, Enumerable<CartesUncheckedCreateWithoutColonnesInput>>
    connectOrCreate?: Enumerable<CartesCreateOrConnectWithoutColonnesInput>
    createMany?: CartesCreateManyColonnesInputEnvelope
    connect?: Enumerable<CartesWhereUniqueInput>
  }

  export type CartesUncheckedCreateNestedManyWithoutColonnesInput = {
    create?: XOR<Enumerable<CartesCreateWithoutColonnesInput>, Enumerable<CartesUncheckedCreateWithoutColonnesInput>>
    connectOrCreate?: Enumerable<CartesCreateOrConnectWithoutColonnesInput>
    createMany?: CartesCreateManyColonnesInputEnvelope
    connect?: Enumerable<CartesWhereUniqueInput>
  }

  export type UserUpdateOneWithoutColonneInput = {
    create?: XOR<UserCreateWithoutColonneInput, UserUncheckedCreateWithoutColonneInput>
    connectOrCreate?: UserCreateOrConnectWithoutColonneInput
    upsert?: UserUpsertWithoutColonneInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutColonneInput, UserUncheckedUpdateWithoutColonneInput>
  }

  export type CartesUpdateManyWithoutColonnesInput = {
    create?: XOR<Enumerable<CartesCreateWithoutColonnesInput>, Enumerable<CartesUncheckedCreateWithoutColonnesInput>>
    connectOrCreate?: Enumerable<CartesCreateOrConnectWithoutColonnesInput>
    upsert?: Enumerable<CartesUpsertWithWhereUniqueWithoutColonnesInput>
    createMany?: CartesCreateManyColonnesInputEnvelope
    set?: Enumerable<CartesWhereUniqueInput>
    disconnect?: Enumerable<CartesWhereUniqueInput>
    delete?: Enumerable<CartesWhereUniqueInput>
    connect?: Enumerable<CartesWhereUniqueInput>
    update?: Enumerable<CartesUpdateWithWhereUniqueWithoutColonnesInput>
    updateMany?: Enumerable<CartesUpdateManyWithWhereWithoutColonnesInput>
    deleteMany?: Enumerable<CartesScalarWhereInput>
  }

  export type CartesUncheckedUpdateManyWithoutColonnesInput = {
    create?: XOR<Enumerable<CartesCreateWithoutColonnesInput>, Enumerable<CartesUncheckedCreateWithoutColonnesInput>>
    connectOrCreate?: Enumerable<CartesCreateOrConnectWithoutColonnesInput>
    upsert?: Enumerable<CartesUpsertWithWhereUniqueWithoutColonnesInput>
    createMany?: CartesCreateManyColonnesInputEnvelope
    set?: Enumerable<CartesWhereUniqueInput>
    disconnect?: Enumerable<CartesWhereUniqueInput>
    delete?: Enumerable<CartesWhereUniqueInput>
    connect?: Enumerable<CartesWhereUniqueInput>
    update?: Enumerable<CartesUpdateWithWhereUniqueWithoutColonnesInput>
    updateMany?: Enumerable<CartesUpdateManyWithWhereWithoutColonnesInput>
    deleteMany?: Enumerable<CartesScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type UserCreateWithoutRolesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    hashedRt?: string | null
    Colonne?: ColonneCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutRolesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    hashedRt?: string | null
    Colonne?: ColonneUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type UserCreateManyRolesInputEnvelope = {
    data: Enumerable<UserCreateManyRolesInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRolesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRolesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
  }

  export type UserUpdateManyWithWhereWithoutRolesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    hash?: StringFilter | string
    hashedRt?: StringNullableFilter | string | null
    roleIdFk?: StringNullableFilter | string | null
  }

  export type RoleCreateWithoutUsersInput = {
    idRole?: string
    role: string
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    idRole?: string
    role: string
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type ColonneCreateWithoutUsersInput = {
    idColonne?: string
    titre: string
    cartes?: CartesCreateNestedManyWithoutColonnesInput
  }

  export type ColonneUncheckedCreateWithoutUsersInput = {
    idColonne?: string
    titre: string
    cartes?: CartesUncheckedCreateNestedManyWithoutColonnesInput
  }

  export type ColonneCreateOrConnectWithoutUsersInput = {
    where: ColonneWhereUniqueInput
    create: XOR<ColonneCreateWithoutUsersInput, ColonneUncheckedCreateWithoutUsersInput>
  }

  export type ColonneCreateManyUsersInputEnvelope = {
    data: Enumerable<ColonneCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    idRole?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    idRole?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type ColonneUpsertWithWhereUniqueWithoutUsersInput = {
    where: ColonneWhereUniqueInput
    update: XOR<ColonneUpdateWithoutUsersInput, ColonneUncheckedUpdateWithoutUsersInput>
    create: XOR<ColonneCreateWithoutUsersInput, ColonneUncheckedCreateWithoutUsersInput>
  }

  export type ColonneUpdateWithWhereUniqueWithoutUsersInput = {
    where: ColonneWhereUniqueInput
    data: XOR<ColonneUpdateWithoutUsersInput, ColonneUncheckedUpdateWithoutUsersInput>
  }

  export type ColonneUpdateManyWithWhereWithoutUsersInput = {
    where: ColonneScalarWhereInput
    data: XOR<ColonneUpdateManyMutationInput, ColonneUncheckedUpdateManyWithoutColonneInput>
  }

  export type ColonneScalarWhereInput = {
    AND?: Enumerable<ColonneScalarWhereInput>
    OR?: Enumerable<ColonneScalarWhereInput>
    NOT?: Enumerable<ColonneScalarWhereInput>
    idColonne?: StringFilter | string
    userIdFk?: StringNullableFilter | string | null
    titre?: StringFilter | string
  }

  export type ColonneCreateWithoutCartesInput = {
    idColonne?: string
    titre: string
    users?: UserCreateNestedOneWithoutColonneInput
  }

  export type ColonneUncheckedCreateWithoutCartesInput = {
    idColonne?: string
    userIdFk?: string | null
    titre: string
  }

  export type ColonneCreateOrConnectWithoutCartesInput = {
    where: ColonneWhereUniqueInput
    create: XOR<ColonneCreateWithoutCartesInput, ColonneUncheckedCreateWithoutCartesInput>
  }

  export type ColonneUpsertWithoutCartesInput = {
    update: XOR<ColonneUpdateWithoutCartesInput, ColonneUncheckedUpdateWithoutCartesInput>
    create: XOR<ColonneCreateWithoutCartesInput, ColonneUncheckedCreateWithoutCartesInput>
  }

  export type ColonneUpdateWithoutCartesInput = {
    idColonne?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateOneWithoutColonneInput
  }

  export type ColonneUncheckedUpdateWithoutCartesInput = {
    idColonne?: StringFieldUpdateOperationsInput | string
    userIdFk?: NullableStringFieldUpdateOperationsInput | string | null
    titre?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutColonneInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    hashedRt?: string | null
    roles?: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutColonneInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    hashedRt?: string | null
    roleIdFk?: string | null
  }

  export type UserCreateOrConnectWithoutColonneInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutColonneInput, UserUncheckedCreateWithoutColonneInput>
  }

  export type CartesCreateWithoutColonnesInput = {
    idCarte?: string
    titre: string
    description: string
    status: string
  }

  export type CartesUncheckedCreateWithoutColonnesInput = {
    idCarte?: string
    titre: string
    description: string
    status: string
  }

  export type CartesCreateOrConnectWithoutColonnesInput = {
    where: CartesWhereUniqueInput
    create: XOR<CartesCreateWithoutColonnesInput, CartesUncheckedCreateWithoutColonnesInput>
  }

  export type CartesCreateManyColonnesInputEnvelope = {
    data: Enumerable<CartesCreateManyColonnesInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutColonneInput = {
    update: XOR<UserUpdateWithoutColonneInput, UserUncheckedUpdateWithoutColonneInput>
    create: XOR<UserCreateWithoutColonneInput, UserUncheckedCreateWithoutColonneInput>
  }

  export type UserUpdateWithoutColonneInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: RoleUpdateOneWithoutUsersInput
  }

  export type UserUncheckedUpdateWithoutColonneInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    roleIdFk?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CartesUpsertWithWhereUniqueWithoutColonnesInput = {
    where: CartesWhereUniqueInput
    update: XOR<CartesUpdateWithoutColonnesInput, CartesUncheckedUpdateWithoutColonnesInput>
    create: XOR<CartesCreateWithoutColonnesInput, CartesUncheckedCreateWithoutColonnesInput>
  }

  export type CartesUpdateWithWhereUniqueWithoutColonnesInput = {
    where: CartesWhereUniqueInput
    data: XOR<CartesUpdateWithoutColonnesInput, CartesUncheckedUpdateWithoutColonnesInput>
  }

  export type CartesUpdateManyWithWhereWithoutColonnesInput = {
    where: CartesScalarWhereInput
    data: XOR<CartesUpdateManyMutationInput, CartesUncheckedUpdateManyWithoutCartesInput>
  }

  export type CartesScalarWhereInput = {
    AND?: Enumerable<CartesScalarWhereInput>
    OR?: Enumerable<CartesScalarWhereInput>
    NOT?: Enumerable<CartesScalarWhereInput>
    idCarte?: StringFilter | string
    titre?: StringFilter | string
    description?: StringFilter | string
    status?: StringFilter | string
    colonneIdFk?: StringNullableFilter | string | null
  }

  export type UserCreateManyRolesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    hashedRt?: string | null
  }

  export type UserUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    Colonne?: ColonneUpdateManyWithoutUsersInput
  }

  export type UserUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    Colonne?: ColonneUncheckedUpdateManyWithoutUsersInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ColonneCreateManyUsersInput = {
    idColonne?: string
    titre: string
  }

  export type ColonneUpdateWithoutUsersInput = {
    idColonne?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    cartes?: CartesUpdateManyWithoutColonnesInput
  }

  export type ColonneUncheckedUpdateWithoutUsersInput = {
    idColonne?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    cartes?: CartesUncheckedUpdateManyWithoutColonnesInput
  }

  export type ColonneUncheckedUpdateManyWithoutColonneInput = {
    idColonne?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
  }

  export type CartesCreateManyColonnesInput = {
    idCarte?: string
    titre: string
    description: string
    status: string
  }

  export type CartesUpdateWithoutColonnesInput = {
    idCarte?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CartesUncheckedUpdateWithoutColonnesInput = {
    idCarte?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CartesUncheckedUpdateManyWithoutCartesInput = {
    idCarte?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}